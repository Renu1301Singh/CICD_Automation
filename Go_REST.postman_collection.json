{
	"info": {
		"_postman_id": "183660cf-bc59-4500-a5f1-effc004812c1",
		"name": "Go_REST",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33288511"
	},
	"item": [
		{
			"name": "TestCases",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "Create User (TC-01) [P] One Should able to create user with valid name and email",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomInteger = Math.floor(Math.random() * 1000);",
											" ",
											"var userName = \"Shreya\" + randomInteger ;",
											" ",
											"var emailId = pm.variables.replaceIn('{{$randomEmail}}');",
											" ",
											"pm.environment.set(\"name\", userName);",
											" ",
											"pm.environment.set(\"email\", emailId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"var userData=pm.response.json();",
											"pm.environment.set(\"id\", userData.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{name}}\", \"gender\":\"female\", \"email\":\"{{email}}\", \"status\":\"active\"}"
								},
								"url": {
									"raw": "{{url}}/public/v2/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User (TC-02) [N] One Should not able to create user with valid name and Invalid email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"sneha gupta\", \"gender\":\"female\", \"email\":\"sneha.gupta.15ce.com\", \"status\":\"active\"}"
								},
								"url": {
									"raw": "{{url}}/public/v2/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User (TC-03) [N] One Should not able to create user with same credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"Tenali Ramakrishna\", \"gender\":\"male\", \"email\":\"tenali.ramakrishna@15ce.com\", \"status\":\"active\"}"
								},
								"url": {
									"raw": "{{url}}/public/v2/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User (TC-04) [N] One Should not able to create user with same email address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"Radhika \", \"gender\":\"female\", \"email\":\"radhika.sarda@15ce.com\", \"status\":\"active\"}"
								},
								"url": {
									"raw": "{{url}}/public/v2/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User (TC-05) [P] One Should  able to create user with status inative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"Abhishek\", \"gender\":\"male\", \"email\":\"abhsi@15ce.com\", \"status\":\"inactive\"}"
								},
								"url": {
									"raw": "{{url}}/public/v2/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User (TC-06) [P] One Should  able to create user with same name and different email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Tenali Ramakrishna\",\n    \"gender\": \"male\",\n    \"email\": \"tenali.2211@15ce.com\",\n    \"status\": \"active\"\n}"
								},
								"url": {
									"raw": "{{url}}/public/v2/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User (TC-07) [P] One Should not able to create user with gender other than male and female",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"moya\", \"gender\":\"third\", \"email\":\"moya.tem@15ce.com\", \"status\":\"active\"}"
								},
								"url": {
									"raw": "{{url}}/public/v2/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create User (TC-08) [P] One Should  not able to create user with name being null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {",
											"    pm.response.to.have.status(422);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true,
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":null, \"gender\":\"male\", \"email\":\"tryit123@gmail.com\", \"status\":\"active\"}"
								},
								"url": {
									"raw": "{{url}}/public/v2/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "Fetch User (TC-01) [P] One Should able to get the user with valid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/public/v2/users/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch User (TC-02) [P] One Should able to get all the user details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/public/v2/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch User (TC-03) [N] One Should not able to get the user with Invalid ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/public/v2/users/6767811",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"6767811"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch User (TC-04) [N] One Should not  able to get the user with invalid ID format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/public/v2/users/676780a",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"676780a"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch User (TC-05) [N] One Should not able to get the user with invalid authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "Bearer 721c70e1046052c2d3070f132473fab80862ba641e9aa582b78c53ccf05"
									}
								],
								"url": {
									"raw": "{{url}}/public/v2/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch User (TC-06) [N] One Should not able to get the user with empty ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/public/v2/users/ ",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										" "
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PATCH",
					"item": [
						{
							"name": "Update User [TC-01] [P] One should able to update the user details with valid user ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomInteger = Math.floor(Math.random() * 1000);",
											" ",
											"var userName = \"Shreya\" + randomInteger ;",
											" ",
											"var emailId = pm.variables.replaceIn('{{$randomEmail}}');",
											" ",
											"pm.environment.set(\"name\", userName);",
											" ",
											"pm.environment.set(\"email\", emailId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{userName}}\", \"email\":\"{{email}}\", \"status\":\"active\"}"
								},
								"url": {
									"raw": "{{url}}/public/v2/users/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User [TC-02 ][N] One should not able to update the user details with valid user ID with special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"Allasani Peddana\", \"email\":\"allasani.peddana@15ce.com\", \"status\":\"active\"}"
								},
								"url": {
									"raw": "https://gorest.co.in/public/v2/users/2139147@",
									"protocol": "https",
									"host": [
										"gorest",
										"co",
										"in"
									],
									"path": [
										"public",
										"v2",
										"users",
										"2139147@"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User [TC-03 ][P] One should able to update the user details multiple times with valid user ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var randomInteger = Math.floor(Math.random() * 1000);",
											" ",
											"var userName = \"Shreya\" + randomInteger ;",
											" ",
											"var emailId = pm.variables.replaceIn('{{$randomEmail}}');",
											" ",
											"pm.environment.set(\"name\", userName);",
											" ",
											"pm.environment.set(\"email\", emailId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"{{userName}}\", \"email\":\"{{email}}\", \"status\":\"active\"}"
								},
								"url": {
									"raw": "{{url}}/public/v2/users/{{id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User [TC-04 ][N] One should not able to update the user details with empty user ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"Abhilash\", \"email\":\"abhilash.12@gmail.co\", \"status\":\"active\"}"
								},
								"url": {
									"raw": "{{url}}/public/v2/users/ ",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										" "
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User [TC-05 ][N] One should not able to update the user details with Invalid user ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\":\"Abhilash\", \"email\":\"abhilash.12@gmail.co,\", \"status\":\"active\"}"
								},
								"url": {
									"raw": "{{url}}/public/v2/users/1213131341",
									"host": [
										"{{url}}"
									],
									"path": [
										"public",
										"v2",
										"users",
										"1213131341"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": []
				},
				{
					"name": "Delete User[TC-01][P] One should be able to delete user with valid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/public/v2/users/{{id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User[TC-02][N] One should not be able to delete user with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/public/v2/users/14124",
							"host": [
								"{{url}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"14124"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User[TC-03][N] One should not be able to delete user with empty id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{token}}"
							}
						],
						"url": {
							"raw": "{{url}}/public/v2/users/ ",
							"host": [
								"{{url}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								" "
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "token",
			"value": "",
			"type": "default"
		}
	]
}